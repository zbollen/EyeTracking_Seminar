names(Behav_data)[names(Behav_data) == "count_pairs_pictures"] <- "trial_order"
#Change trial order from 0-35 to 1-36
Behav_data$trial_order <- (Behav_data$trial_order + 1)
#create dummy variable for accuracy
Behav_data <- Behav_data %>%
mutate(accuracy = if_else(response=Arrow_Direction, 1, 0)
)
#create dummy variable for accuracy
Behav_data <- Behav_data %>%
mutate(accuracy = if_else(response==Arrow_Direction, 1, 0)
)
#Convert uppercase letters of Arrow_Direction values in lowercase
Behav_data$Arrow_Direction<-tolower(Behav_data$Arrow_Direction)
#create dummy variable for accuracy
Behav_data <- Behav_data %>%
mutate(accuracy = if_else(response==Arrow_Direction, 1, 0)
)
range(Behav_data$Trial_ID)
range(Behav_data$Pair_Number)
unique(Behav_data$subject_nr) #correspond to computer number
range(Behav_data$Block)
unique(Behav_data$Left_Picture)
unique(Behav_data$Right_Picture)
range(Behav_data$response_time)
range(Behav_data$accuracy)
unique(Behav_data$Congruence)
unique(Behav_data$practice)
#Select columns of interest for questionnaires
Quest_data <- select(Data_behav, subject_nr, fat_craving, sugar_craving) %>%
group_by (subject_nr, EU_ETS, age, vege_Q1, vege_Q2, vege_Q3,
GEB_Q1, GEB_Q2, GEB_Q3, GEB_Q4, GEB_Q5, GEB_Q6, GEB_Q7, GEB_Q8, GEB_Q9, GEB_Q10, GEB_Q11,
GEB_Q12, GEB_Q13, GEB_Q14, GEB_Q15, GEB_Q16, GEB_Q17, GEB_Q18, GEB_Q19, GEB_Q20, GEB_Q21, GEB_Q22, GEB_Q23, GEB_Q24,
GEB_Q25, GEB_Q26, GEB_Q27, GEB_Q28, GEB_Q29, GEB_Q30, GEB_Q31, GEB_Q32, GEB_Q33, GEB_Q34, GEB_Q35, GEB_Q36, GEB_Q37,
GEB_Q38, GEB_Q39, GEB_Q40, GEB_Q41, GEB_Q42, GEB_Q43, GEB_Q44, GEB_Q45, GEB_Q46, GEB_Q47, GEB_Q48, GEB_Q49, GEB_Q50,
GEB_Q51, GEB_Q52, GEB_Q53, strategy_Q1, strategy_Q2, strategy_Q3, strategy_Q4, strategy_Q5, strategy_Q6, strategy_OQ,
SVS_Q1, SVS_Q2, SVS_Q3, SVS_Q4, SVS_Q5, SVS_Q6, SVS_Q7, SVS_Q8, SVS_Q9, SVS_Q10, SVS_Q11,
SVS_Q12, SVS_Q13, SVS_Q14, SVS_Q15, SVS_Q16, time_EU_ETS, practice, ORSEE_code,
randomNum, r_decision, r_carbon, r_money, r_response_carbon, r_response_money) %>%
summarise (  )
#Select columns of interest for questionnaires
Quest_data <- select(Data_behav, subject_nr, fat_craving, sugar_craving)
View(Quest_data)
#Select variables of interest for behavioral measures
Behav_data <- Data_behav %>%
select(subject_nr, Trial_ID, Block, practice, count_pairs_pictures,
Arrow_Direction, Arrow_Position, Congruence,
Left_Picture, Right_Picture, Pair_Number, response, response_time) %>%
filter(Trial_ID = 1)
#Select variables of interest for behavioral measures
Behav_data <- Data_behav %>%
select(subject_nr, Trial_ID, Block, practice, count_pairs_pictures,
Arrow_Direction, Arrow_Position, Congruence,
Left_Picture, Right_Picture, Pair_Number, response, response_time) %>%
subset(practice == "no")
mutate(accuracy = if_else(response==Arrow_Direction, 1, 0)
#Select variables of interest for behavioral measures, remove practice trials
Behav_data <- Data_behav %>%
#Select variables of interest for behavioral measures, remove practice trials
Behav_data <- Data_behav %>%
select(subject_nr, Trial_ID, Block, practice, count_pairs_pictures,
Arrow_Direction, Arrow_Position, Congruence,
Left_Picture, Right_Picture, Pair_Number, response, response_time) %>%
subset(practice == "no") %>%
mutate(accuracy = if_else(response==Arrow_Direction, 1, 0))
#Select variables of interest for behavioral measures, remove practice trials
Behav_data <- Data_behav %>%
select(subject_nr, Trial_ID, Block, practice, count_pairs_pictures,
Arrow_Direction, Arrow_Position, Congruence,
Left_Picture, Right_Picture, Pair_Number, response, response_time) %>%
subset(practice == "no") %>%
tolower(Arrow_Direction) %>%
mutate(accuracy = if_else(response==Arrow_Direction, 1, 0))
#Select variables of interest for behavioral measures, remove practice trials
Behav_data <- Data_behav %>%
select(subject_nr, Trial_ID, Block, practice, count_pairs_pictures,
Arrow_Direction, Arrow_Position, Congruence,
Left_Picture, Right_Picture, Pair_Number, response, response_time) %>%
subset(practice == "no") %>%
tolower(Data_behav$Arrow_Direction) %>%
mutate(accuracy = if_else(response==Arrow_Direction, 1, 0))
tolower()
#Select variables of interest for behavioral measures, remove practice trials
Behav_data <- Data_behav %>%
select(subject_nr, Trial_ID, Block, practice, count_pairs_pictures,
Arrow_Direction, Arrow_Position, Congruence,
Left_Picture, Right_Picture, Pair_Number, response, response_time) %>%
subset(practice == "no") %>%
tolower(Arrow_Direction) %>%
mutate(accuracy = if_else(response==Arrow_Direction, 1, 0))
#Select variables of interest for behavioral measures, remove practice trials
Behav_data <- Data_behav %>%
select(subject_nr, Trial_ID, Block, practice, count_pairs_pictures,
Arrow_Direction, Arrow_Position, Congruence,
Left_Picture, Right_Picture, Pair_Number, response, response_time) %>%
subset(practice == "no") %>%
toLowerCase(Arrow_Direction) %>%
mutate(accuracy = if_else(response==Arrow_Direction, 1, 0))
#Select variables of interest for behavioral measures, remove practice trials
Behav_data <- Data_behav %>%
select(subject_nr, Trial_ID, Block, practice, count_pairs_pictures,
Arrow_Direction, Arrow_Position, Congruence,
Left_Picture, Right_Picture, Pair_Number, response, response_time) %>%
subset(practice == "no")
#Rename columns in response variables
names(Behav_data)[names(Behav_data) == "count_pairs_pictures"] <- "trial_order"
#Change trial order from 0-83 to 1-84
Behav_data$trial_order <- (Behav_data$trial_order + 1)
#Convert uppercase letters of Arrow_Direction values in lowercase
Behav_data$Arrow_Direction<-tolower(Behav_data$Arrow_Direction)
#Set trial ID as integer
Behav_data$Trial_ID<-as.integer(Behav_data$Trial_ID)
#create dummy variable for accuracy (1 for correct response, 0 for incorrect response)
Behav_data <- Behav_data %>%
mutate(accuracy = if_else(response==Arrow_Direction, 1, 0)
)
Behav_data
#Select columns of interest for questionnaires
Quest_data <- select(Data_behav, subject_nr, fat_craving, sugar_craving, Trial_ID)
#Remove practice and experimental trials by selecting only the last row of the file
Quest_data <- filter(Quest_data, Trial_ID = 1)
#Remove practice and experimental trials by selecting only the last row of the file
Quest_data <- filter(Quest_data, Trial_ID == 1)
part_ID <- paste(group, computer_number, sep="")
unique(Quest_data$fat_craving)
unique(Quest_data$sugar_craving)
All_Data_Behav <- merge(Behav_data, Quest_data)
All_Data <- merge(Data_fix, All_Data_Behav)
View(Behav_data)
#Select variables of interest for behavioral measures, remove practice trials
Behav_data <- Data_behav %>%
select(subject_nr, fat_craving, sugar_craving,
Trial_ID, Block, practice, count_pairs_pictures,
Arrow_Direction, Arrow_Position, Congruence,
Left_Picture, Right_Picture, Pair_Number, response, response_time) %>%
subset(practice == "no")
#Rename columns in response variables
names(Behav_data)[names(Behav_data) == "count_pairs_pictures"] <- "trial_order"
#Change trial order from 0-83 to 1-84
Behav_data$trial_order <- (Behav_data$trial_order + 1)
#Convert uppercase letters of Arrow_Direction values in lowercase
Behav_data$Arrow_Direction<-tolower(Behav_data$Arrow_Direction)
#Set trial ID as integer
Behav_data$Trial_ID<-as.integer(Behav_data$Trial_ID)
#create dummy variable for accuracy (1 for correct response, 0 for incorrect response)
Behav_data <- Behav_data %>%
mutate(accuracy = if_else(response==Arrow_Direction, 1, 0)
)
Behav_data
unique(Quest_data$fat_craving)
unique(Quest_data$sugar_craving)
range(Behav_data$Trial_ID)
range(Behav_data$Pair_Number)
unique(Behav_data$subject_nr) #correspond to computer number
range(Behav_data$Block)
unique(Behav_data$Left_Picture)
unique(Behav_data$Right_Picture)
range(Behav_data$response_time)
range(Behav_data$accuracy)
unique(Behav_data$Congruence)
unique(Behav_data$practice)
All_Data <- merge(Data_fix, Behav_data)
View(Data_fix)
names(Behav_data)[names(Behav_data) == "Trial_ID"] <- "trial_id"
All_Data <- merge(Data_fix, Behav_data)
#Set trial ID as integer
Behav_data$trial_id<-as.integer(Behav_data$trial_id)
All_Data <- merge(Data_fix, Behav_data)
Data_fix$trial_id<-as.integer(Data_fix$trial_id)
All_Data <- merge(Data_fix, Behav_data)
All_Data <- merge(Data_fix, Behav_data, by = "trial_id")
View(All_Data)
Behav_data$subject_nr<-as.integer(Behav_data$subject_nr)
All_Data <- merge(Data_fix, Behav_data, by = "trial_id")
All_Data <- merge(Data_fix, Behav_data, by.x = "trial_id", by.y = "subject_nr")
All_Data <- merge(Data_fix, Behav_data, by.x = "trial_id")
All_Data <- merge(Data_fix, Behav_data, by = "trial_id")
All_Data <- merge(Data_fix, Behav_data, by = c("trial_id", "subject_nr"))
All_Data <- merge(Data_fix, Behav_data, by = "trial_id")
#rename Left and Right AOI by the type of food presented (Money or Carbon) according to subject parity ()
All_Data$AOI_visited[All_Data$AOI_visited == "Left"] <- Left_Picture
#rename Left and Right AOI by the type of food presented (Money or Carbon) according to subject parity ()
All_Data$AOI_visited[All_Data$AOI_visited == "Left"] <- All_Data$Left_Picture
#rename Left and Right AOI by the type of food presented (Money or Carbon) according to subject parity ()
All_Data$AOI_visited[All_Data$AOI_visited == "Left" & All_Data$Left_Picture == 'FF'] <- "Salty"
All_Data$AOI_visited[All_Data$AOI_visited == "Left" & All_Data$Left_Picture == 'FL'] <- "Healthy"
All_Data$AOI_visited[All_Data$AOI_visited == "Left" & All_Data$Left_Picture == 'FS'] <- "Sugary"
All_Data$AOI_visited[All_Data$AOI_visited == "Right" & All_Data$Right_Picture == 'FF'] <- "Salty"
All_Data$AOI_visited[All_Data$AOI_visited == "Right" & All_Data$Right_Picture == 'FL'] <- "Healthy"
All_Data$AOI_visited[All_Data$AOI_visited == "Right" & All_Data$Right_Picture == 'FS'] <- "Sugary"
# create a ggplot per trial
p_trial <- All_Data %>%
ggplot( aes(x=sx, y=sy), color=AOI_visited) +
geom_point(aes(fill=AOI_visited, size=duration), alpha=0.3, shape=21) +
geom_point(aes(x=0.5, y=0.5), colour="black", shape=3) +
theme_ipsum() +
xlim(1,0)+
ylim(1,0)+
facet_wrap(~ Trial + DecisionTime, ncol=6, labeller=label_both)+
scale_fill_manual(values=c("blue", "cyan4"))+
theme(axis.text.x=element_blank(), #remove x axis labels
axis.ticks.x=element_blank(), #remove x axis ticks
axis.title.x = element_blank(), #remove x axis title
axis.text.y=element_blank(),  #remove y axis labels
axis.ticks.y=element_blank(),  #remove y axis ticks
axis.title.y = element_blank(), #remove y axis title
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_rect(colour="black", fill=NA),
strip.text = element_text(size = 8.5)
)
p_trial
# create a ggplot per trial
p_trial <- All_Data %>%
ggplot( aes(x=sx, y=sy), color=AOI_visited) +
geom_point(aes(fill=AOI_visited, size=duration), alpha=0.3, shape=21) +
geom_point(aes(x=0.5, y=0.5), colour="black", shape=3) +
theme_ipsum() +
xlim(1,0)+
ylim(1,0)+
facet_wrap(~ trial_id + response_time, ncol=6, labeller=label_both)+
scale_fill_manual(values=c("blue", "cyan4"))+
theme(axis.text.x=element_blank(), #remove x axis labels
axis.ticks.x=element_blank(), #remove x axis ticks
axis.title.x = element_blank(), #remove x axis title
axis.text.y=element_blank(),  #remove y axis labels
axis.ticks.y=element_blank(),  #remove y axis ticks
axis.title.y = element_blank(), #remove y axis title
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_rect(colour="black", fill=NA),
strip.text = element_text(size = 8.5)
)
p_trial
# create a ggplot per trial
p_trial <- All_Data %>%
ggplot( aes(x=sx, y=sy), color=AOI_visited) +
geom_point(aes(fill=AOI_visited, size=duration), alpha=0.3, shape=21) +
geom_point(aes(x=0.5, y=0.5), colour="black", shape=3) +
theme_ipsum() +
xlim(1,0)+
ylim(1,0)+
facet_wrap(~ trial_id, ncol=6, labeller=label_both)+
scale_fill_manual(values=c("blue", "cyan4"))+
theme(axis.text.x=element_blank(), #remove x axis labels
axis.ticks.x=element_blank(), #remove x axis ticks
axis.title.x = element_blank(), #remove x axis title
axis.text.y=element_blank(),  #remove y axis labels
axis.ticks.y=element_blank(),  #remove y axis ticks
axis.title.y = element_blank(), #remove y axis title
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_rect(colour="black", fill=NA),
strip.text = element_text(size = 8.5)
)
p_trial
# install package librarian if needed
if (!("librarian" %in% rownames(installed.packages()))) {
install.packages("librarian")
}
# install / load required packages
librarian::shelf(
dplyr,
readr,
ggExtra,
tidyverse,
hrbrthemes,
)
#install gar parser package
if (!("gar" %in% rownames(installed.packages()))) {
install.packages("../parser/gar_0.3.0.zip", repos = NULL, type = "win.binary")
}
library(gar)
# Change the following values for each participant
date <- "06.11.2024"
group <- "Students"
computer_number <- "07" #put a zero before single digit
gaze_data_file <- "20241106T122516_PSY-NEUROSOZ-07_CET_7_gaze.csv"
#Define the relative paths
RawMainDir <- "../raw data"
PreprocessMainDir <- "../preprocessed data"
PartSubDir <- paste(group, "_participants", sep="")
part_ID <- paste(group, computer_number, sep="")
# get the default parameters from the library
params <- gar_get_filter_parameter_default()
# adjust the filter parameters
params$gap$max_gap_length <- 50
params$gap$sample_period <- 1000/60
params$noise$mid_idx <- 1
params$saccade$velocity_threshold <- 20
params$fixation$duration_threshold <- 100
params$fixation$dispersion_threshold <- 0.5
#define screen resolution
screen_res_X = 1920 #
screen_res_Y = 1080 #
# define screen normalized size
screen_X_max = 1 # X normalised data
screen_X_min = 0 # X normalised data
screen_Y_max = 1 # Y normalised data
screen_Y_min = 0 # Y normalised data
#load participant raw data
setwd (file.path(RawMainDir,PartSubDir))
d_raw <- read_csv(gaze_data_file)
d_raw
#Check if you have unvalid fixations
unique(d_raw$combined_gazePoint2d_isValid)
#Drop unvalid gaze samples
d_raw_valid <- subset(d_raw, combined_gazePoint2d_isValid == TRUE)
#Check your filter data
unique(d_raw_valid$combined_gazePoint2d_isValid)
#Check the range positions of all fixations on the x and y coordinates.
range(d_raw_valid$combined_gazePoint2dCompensated_x)
range(d_raw_valid$combined_gazePoint2dCompensated_y)
# since sx and sy should be the normalized x/y coordinates of the 2d gaze point, everything >0 and <1 should be on the screen and everything else should be excluded
# Drop drift-compensated fixations outside the screen
d_valid_screen <- subset(
d_raw_valid,
combined_gazePoint2dCompensated_x > screen_X_min &
combined_gazePoint2dCompensated_x < screen_X_max &
combined_gazePoint2dCompensated_y > screen_Y_min &
combined_gazePoint2dCompensated_y < screen_Y_max
)
#Check your filter data
range(d_valid_screen$combined_gazePoint2dCompensated_x)
range(d_valid_screen$combined_gazePoint2dCompensated_y)
#Check your logged messages
unique(d_valid_screen$label)
#filter the data to only include fixations during the presentation of the pictures
d <- subset(d_valid_screen, label == "Pictures_Onset") #
#Check your filter data
unique(d$label)
# Initialise the gaze analysis handler with the modified parameter structure
handler <- gar_create(params)
#Set trial ID as integer
d$trial_id<-as.integer(d$trial_id)
# Pass the participant data to the parser
res <- gar_parse(handler,
d$combined_gazePoint3dCompensated_x,
d$combined_gazePoint3dCompensated_y,
d$combined_gazePoint3dCompensated_z,
d$combined_originPoint3d_x,
d$combined_originPoint3d_y,
d$combined_originPoint3d_z,
d$combined_gazePoint2dCompensated_x,
d$combined_gazePoint2dCompensated_y,
d$timestamp_relative,
d$trial_id,
d$label
)
# Separate the fixation table from other results
Data_fix <- (res$fixations)
Data_fix$subject_nr <- computer_number
#define screen coordinates on OpenSesame
OS_min_screen_X <- -(screen_res_X/2) #
OS_max_screen_X <- screen_res_X/2 #
OS_min_screen_Y <- -(screen_res_Y/2) #
OS_max_screen_Y <- screen_res_Y/2 #
#define AOI coordinates for the left picture on OpenSesame
OS_min_left_X <- -410 #
OS_max_left_X <- -90#
OS_min_left_Y <- -160#
OS_max_left_Y <- 160#
#define AOI coordinates for the right picture on OpenSesame
OS_min_right_X <- 90#
OS_max_right_X <- 410#
OS_min_right_Y <- -160#
OS_max_right_Y <- 160#
#Convert in normalized coordinates for the left AOI (screen: min=0,0; max=1,1)
norm_min_left_X <- (OS_min_left_X + OS_max_screen_X)/ screen_res_X
norm_max_left_X <- (OS_max_left_X + OS_max_screen_X)/ screen_res_X
norm_min_left_Y <- (OS_min_left_Y + OS_max_screen_Y)/ screen_res_Y
norm_max_left_Y <- (OS_max_left_Y + OS_max_screen_Y)/ screen_res_Y
norm_min_right_X <- (OS_min_right_X + OS_max_screen_X)/ screen_res_X
norm_max_right_X <- (OS_max_right_X + OS_max_screen_X)/ screen_res_X
norm_min_right_Y <- (OS_min_right_Y + OS_max_screen_Y)/ screen_res_Y
norm_max_right_Y <- (OS_max_right_Y + OS_max_screen_Y)/ screen_res_Y
#Create a column indicating the AOI visited by the fixation (NA if the fixation was outside the AOIs)
Data_fix <- dplyr::mutate(Data_fix, AOI_visited = case_when(
sx >= norm_min_left_X & sx <= norm_max_left_X & sy >= norm_min_left_Y & sy <= norm_max_left_Y ~ 'Left',
sx >= norm_min_right_X & sx <= norm_max_right_X & sy >= norm_min_right_Y & sy <= norm_max_right_Y ~ 'Right')) #
range(Data_fix$trial_id) #ask which variables they want to check
range(Data_fix$duration)
range(Data_fix$trial_onset)
range(Data_fix$sx)
range(Data_fix$sy)
unique(Data_fix$label)
# create a ggplot2 scatterplot per AOI
p <- Data_fix %>%
ggplot( aes(x=sx, y=sy), color=AOI_visited) +
geom_point(aes(colour=AOI_visited), size=1, alpha=1) +
theme_ipsum() +
xlim(0,1)+
ylim(1,0)+
scale_colour_manual(values=c("blue", "cyan4"))
p
setwd (file.path(RawMainDir,PartSubDir))
Data_behav <- read.csv(file=paste("PSY-NEUROSOZ-",computer_number,"_", date,".csv",sep=""))
Behav_data <- Data_behav %>% # ask them the variables of interest
select(
subject_nr,
fat_craving,
sugar_craving,
Trial_ID,
Block,
practice,
Arrow_Direction,
Arrow_Position,
Congruence,
Left_Picture,
Right_Picture,
Pair_Number,
response,
response_time
) %>%
subset(practice == "no")
#Rename trial_id variable to match with our Data_fix dataset
names(Behav_data)[names(Behav_data) == "Trial_ID"] <- "trial_id"
#Convert uppercase letters of "Arrow_Direction" cases in lowercase to match with "response" cases
Behav_data$Arrow_Direction<-tolower(Behav_data$Arrow_Direction)
#Set trial ID and subject_nr as integers
Behav_data$trial_id<-as.integer(Behav_data$trial_id)
Behav_data$subject_nr<-as.integer(Behav_data$subject_nr)
#create dummy variable for accuracy (1 for correct response, 0 for incorrect response)
Behav_data <- Behav_data %>%
mutate(accuracy = if_else(response == Arrow_Direction, 1, 0) #
)
unique(Behav_data$fat_craving)
unique(Behav_data$sugar_craving)
range(Behav_data$trial_id)
range(Behav_data$Pair_Number)
unique(Behav_data$subject_nr) #correspond to computer number
range(Behav_data$Block)
unique(Behav_data$Left_Picture)
unique(Behav_data$Right_Picture)
range(Behav_data$response_time)
range(Behav_data$accuracy)
unique(Behav_data$Congruence)
unique(Behav_data$practice)
All_Data <- merge(Data_fix, Behav_data, by = "trial_id")
#rename Left and Right AOI by the type of food presented (Salty, Sugary and Healthy)
All_Data$AOI_visited[All_Data$AOI_visited == "Left" & All_Data$Left_Picture == 'FF'] <- "Salty"
All_Data$AOI_visited[All_Data$AOI_visited == "Left" & All_Data$Left_Picture == 'FL'] <- "Healthy"
All_Data$AOI_visited[All_Data$AOI_visited == "Left" & All_Data$Left_Picture == 'FS'] <- "Sugary"
All_Data$AOI_visited[All_Data$AOI_visited == "Right" & All_Data$Right_Picture == 'FF'] <- "Salty"
All_Data$AOI_visited[All_Data$AOI_visited == "Right" & All_Data$Right_Picture == 'FL'] <- "Healthy"
All_Data$AOI_visited[All_Data$AOI_visited == "Right" & All_Data$Right_Picture == 'FS'] <- "Sugary"
unique(All_Data$AOI_visited)
# Filter data to include only trials where Salty food is in Left_Picture or Right_Picture
Salty_Data <- All_Data %>%
filter(Left_Picture == "FF" | Right_Picture == "FF")
# Extract craving values
salty_food_craving <- unique(Salty_Data$fat_craving)
# create a ggplot per trial
p_salty_trial <- Salty_Data %>%
ggplot( aes(x=sx, y=sy), color=AOI_visited) +
geom_point(aes(fill=AOI_visited, size=duration), alpha=0.3, shape=21) +
geom_point(aes(x=0.5, y=0.5), colour="black", shape=3) +
theme_ipsum() +
xlim(1,0)+
ylim(1,0)+
facet_wrap(~ trial_id, ncol=8, labeller=label_both)+
scale_fill_manual(values=c("green", "red"))+
ggtitle(paste("Participant:", part_ID, "- Salty food Craving:", salty_food_craving)) +
theme(axis.text.x=element_blank(), #remove x axis labels
axis.ticks.x=element_blank(), #remove x axis ticks
axis.title.x = element_blank(), #remove x axis title
axis.text.y=element_blank(),  #remove y axis labels
axis.ticks.y=element_blank(),  #remove y axis ticks
axis.title.y = element_blank(), #remove y axis title
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_rect(colour="black", fill=NA),
strip.text = element_text(size = 8.5))
p_salty_trial
# Filter data to include only trials where sugary food is in Left_Picture or Right_Picture
Sugary_Data <- All_Data %>%
filter(Left_Picture == "FS" | Right_Picture == "FS")
# Extract craving values
sugary_food_craving <- unique(Salty_Data$sugar_craving)
# create a ggplot per trial
p_sugary_trial <- Sugary_Data %>%
ggplot( aes(x=sx, y=sy), color=AOI_visited) +
geom_point(aes(fill=AOI_visited, size=duration), alpha=0.3, shape=21) +
geom_point(aes(x=0.5, y=0.5), colour="black", shape=3) +
theme_ipsum() +
xlim(1,0)+
ylim(1,0)+
facet_wrap(~ trial_id, ncol=8, labeller=label_both)+
scale_fill_manual(values=c("green", "red"))+
ggtitle(paste("Participant:", part_ID, "- Sugary food Craving:", sugary_food_craving)) +
theme(axis.text.x=element_blank(), #remove x axis labels
axis.ticks.x=element_blank(), #remove x axis ticks
axis.title.x = element_blank(), #remove x axis title
axis.text.y=element_blank(),  #remove y axis labels
axis.ticks.y=element_blank(),  #remove y axis ticks
axis.title.y = element_blank(), #remove y axis title
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_rect(colour="black", fill=NA),
strip.text = element_text(size = 8.5))
p_sugary_trial
# Check if the main preprocessed directory exists
if (!dir.exists(PreprocessMainDir)) {
dir.create(PreprocessMainDir) # Create the main directory if it doesn't exist
}
# Check if the subdirectory for plots exists
AllSubDirPlot <- "Each_Part_GazePlot"
if (file.exists(AllSubDirPlot)){
setwd(file.path(PreprocessMainDir, AllSubDirPlot))
} else {
dir.create(file.path(PreprocessMainDir, AllSubDirPlot))
setwd(file.path(PreprocessMainDir, AllSubDirPlot))
}
